package search

import (
	"cvepack/core/osv"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

type PackageVulnerability struct {
	Id                     int                  `json:"cvepack_id"`
	VulnerabilityId        string               `json:"vulnerability_id"`
	PackageEcosystem       string               `json:"package_ecosystem"`
	PackageName            string               `json:"package_name"`
	VersionIntroduced      string               `json:"version_introduced"`
	VersionFixed           *string              `json:"version_fixed"`
	VersionLastAffected    *string              `json:"version_last_affected"`
	Summary                string               `json:"summary"`
	Details                string               `json:"details"`
	Aliases                []byte               `json:"-"`
	AliasesParsed          []string             `json:"aliases"`
	DatabaseSpecific       []byte               `json:"-"`
	DatabaseSpecificParsed osv.DatabaseSpecific `json:"database_specific"`
}

func (p *PackageVulnerability) Parse() error {
	var aliasesParsed []string
	err := json.Unmarshal([]byte(p.Aliases), &aliasesParsed)
	if err != nil {
		return errors.New(fmt.Sprintf("error parsing aliases: %s", err))
	}
	p.AliasesParsed = aliasesParsed

	var dbSpecParsed osv.DatabaseSpecific
	err = json.Unmarshal(p.DatabaseSpecific, &dbSpecParsed)
	if err != nil {
		return errors.New(fmt.Sprintf("error parsing database specific: %s", err))
	}
	p.DatabaseSpecificParsed = dbSpecParsed

	return nil
}

func (p *PackageVulnerability) String() string {
	return fmt.Sprintf("%s %s %s", p.PackageEcosystem, p.PackageName, p.VersionIntroduced)
}

func (p *PackageVulnerability) AliasesToString() string {
	return strings.Join(p.AliasesParsed, ", ")
}

func (p *PackageVulnerability) SeverityLevel() string {
	return p.DatabaseSpecificParsed.Severity
}

func (p *PackageVulnerability) HasFix() (bool, string) {
	if p.VersionFixed != nil && strings.TrimSpace(*p.VersionFixed) != "" {
		return true, *p.VersionFixed
	}
	return false, ""
}
